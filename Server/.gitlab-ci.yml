# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/dotNET.gitlab-ci.yml

# The following script will work for any project that can be built from command line by msbuild
# It uses powershell shell executor, so you need to add the following line to your config.toml file
# (located in gitlab-runner.exe directory):
#   shell = "powershell"
#
# The script is composed of 3 stages: build, test and deploy.
#
# The build stage restores NuGet packages and uses msbuild to build the exe and msi
# One major issue you'll find is that you can't build msi projects from command line
# if you use vdproj.  There are workarounds building msi via devenv, but they rarely work
# The best solution is migrating your vdproj projects to WiX, as it can be build directly
# by msbuild.
#
# The test stage runs nunit from command line against Test project inside your solution
# It also saves the resulting TestResult.xml file
#
# The deploy stage copies the exe and msi from build stage to a network drive
# You need to have the network drive mapped as Local System user for gitlab-runner service to see it
# The best way to persist the mapping is via a scheduled task
# running the following batch command: net use P: \\x.x.x.x\Projects /u:your_user your_pass /persistent:yes
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.

# place project specific paths in variables to make the rest of the script more generic
variables:
  DEPLOY_FOLDER: '\\WEB02.ops.netrom.live\boilerplates-api-layered'

.ps-functions: &ps-functions |
    function buildApi() { 
        dotnet build-server shutdown; 
        dotnet restore $CI_PROJECT_DIR\NetRom.Boilerplates.API/NetRom.Boilerplates.API.csproj; 
        dotnet build $CI_PROJECT_DIR\NetRom.Boilerplates.API/NetRom.Boilerplates.API.csproj /p:Configuration=Release;
        dotnet publish $CI_PROJECT_DIR\NetRom.Boilerplates.API/NetRom.Boilerplates.API.csproj /p:Configuration=Release;
    }

    function deployApi() {
        $deployFolder = $env:DEPLOY_FOLDER
        New-Item -Path $deployFolder -Name "app_offline.htm" -ItemType "file"
        Get-ChildItem -Path $deployFolder -Recurse -Exclude web.config, app_offline.htm, appsettings.json | Foreach-object {            Remove-item -Recurse -Force -path $_.FullName };
        xcopy "$CI_PROJECT_DIR\NetRom.Boilerplates.API\bin\Release\net7.0\*.*" "$deployFolder" /s /y /r /q;
        Remove-Item -Path $deployFolder\app_offline.htm
    }

nro_api_boilerplate_schedule:
   environment:
    name: 'Automatic builds'
   variables: 
    ErrorActionPreference: stop
   tags:
    - netcore
   script:
    - *ps-functions
    - 'buildApi'
    - 'deployApi($DEPLOY_FOLDER)'
   only:
    refs:
      - template/layer
      - schedules
